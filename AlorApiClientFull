package com.alor.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.Instant;

public class AlorApiClientFull {
    private static final String BASE_URL = "https://api.alor.ru";
    private static final String AUTH_URL = "https://oauth.alor.ru/refresh";
    private static final ObjectMapper mapper = new ObjectMapper();

    private String accessToken = null;
    private Instant tokenExpiry = Instant.EPOCH; // задать в прошлом
    private final String refreshToken;

    public AlorApiClientFull(String refreshToken) {
        this.refreshToken = refreshToken;
    }

    /**
     * Получение access token через refresh token
     */
    private void refreshAccessToken() throws IOException {
        System.out.println("[INFO] Refreshing access token...");
        URL url = new URL("https://oauth.alor.ru/refresh");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json");
        conn.setDoOutput(true);

        String body = String.format("{\"token\":\"%s\"}", refreshToken);

        try (OutputStream os = conn.getOutputStream()) {
            os.write(body.getBytes(StandardCharsets.UTF_8));
        }

        int status = conn.getResponseCode();
        String responseBody;
        if (status >= 200 && status < 300) {
            responseBody = new String(conn.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
        } else {
            responseBody = new String(conn.getErrorStream() != null ? conn.getErrorStream().readAllBytes() : new byte[0], StandardCharsets.UTF_8);
            throw new RuntimeException("[ERROR] Failed to refresh token: status " + status + ", body: " + responseBody);
        }

        JsonNode json = mapper.readTree(responseBody);
        // ALOR возвращает «AccessToken» или «access_token»
        if (!json.has("AccessToken") && !json.has("access_token")) {
            throw new RuntimeException("No access token in refresh response: " + responseBody);
        }
        String newToken = json.has("AccessToken") ? json.get("AccessToken").asText() : json.get("access_token").asText();
        this.accessToken = newToken;
        this.tokenExpiry = Instant.now().plusSeconds(30 * 60 - 60); // 30 минут минус 1 минута запаса
        System.out.println("[INFO] New access token acquired, valid until: " + tokenExpiry);
    }


    /**
     * Обертка для GET-запросов с проверкой токена и автообновлением
     */
    private String get(String path) throws IOException {
        // Проверка срока токена
        if (accessToken == null || Instant.now().isAfter(tokenExpiry)) {
            refreshAccessToken();
        }

        URL url = new URL(BASE_URL + path);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Authorization", "Bearer " + accessToken);

        int status = conn.getResponseCode();
        if (status == 401 || status == 403) {
            System.out.println("[WARN] Access token seems expired or invalid (status " + status + "), refreshing...");
            refreshAccessToken();
            return get(path);
        }if (status != 200) {
            String err = new String(conn.getErrorStream() != null ? conn.getErrorStream().readAllBytes() : new byte[0], StandardCharsets.UTF_8);
            throw new RuntimeException("[ERROR] GET request failed: status " + status + ", body: " + err);
        }
        return new String(conn.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
    }

    public String getOrderBook(String exchange, String symbol) throws Exception {
        String path = String.format("/md/v2/orderbooks/%s/%s", exchange, symbol);
        return get(path);
    }

    public String getLastPrices(String exchange, String symbol) throws Exception {
        String path = String.format("/md/v2/securities/%s/%s/quotes", exchange, symbol);
        return get(path);
    }

    public Double getLastPriceValue(String exchange, String symbol) throws IOException {
        try {
            String quotes = get(String.format("/md/v2/Securities/%s/%s/quotes", exchange, symbol));
            JsonNode node = mapper.readTree(quotes);
            if (node.has("last_price")) {
                return node.get("last_price").asDouble();
            }
        } catch (RuntimeException e) {
            if (!e.getMessage().contains("404")) throw e;
            System.out.println("[INFO] Quotes unavailable, trying last trade...");
        }

        try {
            String trades = get(String.format("/md/v2/Securities/%s/%s/alltrades?limit=1", exchange, symbol));
            JsonNode arr = mapper.readTree(trades);
            if (arr.isArray() && arr.size() > 0 && arr.get(0).has("price")) {
                return arr.get(0).get("price").asDouble();
            } else {
                System.out.println("[WARN] No trades data returned for " + symbol);
                return null;
            }
        } catch (RuntimeException e) {
            if (e.getMessage().contains("404")) {
                System.out.println("[WARN] alltrades endpoint returned 404 for " + symbol + ", no price available.");
                return null;
            }
            throw e;
        }
    }


    public String getHistory(String exchange, String symbol, String interval, Instant from, Instant to) throws Exception {
        String path = String.format("/md/v2/history?symbol=%s&exchange=%s&interval=%s&from=%d&to=%d",
                symbol, exchange, interval, from.toEpochMilli(), to.toEpochMilli());
        return get(path);
    }

    public static void main(String[] args) throws Exception {
        String refreshToken = "d048ce72-0c81-4568-93e6-dcf60444f860";
        String clientId = "5665374bd03343c58186";
        String clientSecret = "DBg/jDZNvSg4womNNaYdctOmnLUaqDqx8HEWxAznWXc=";

        AlorApiClientFull api = new AlorApiClientFull(refreshToken);

        System.out.println("=== Order book for SBER ===");
        System.out.println(api.getOrderBook("MOEX", "SBER"));

        System.out.println("=== Last price for SBER ===");
        Double lastPrice = api.getLastPriceValue("MOEX", "SBER");
        System.out.println("Last price: " + lastPrice);

        System.out.println("=== History M5 for last 24h ===");
        Instant now = Instant.now();
        Instant yesterday = now.minusSeconds(24 * 3600);
        System.out.println(api.getHistory("MOEX", "SBER", "M5", yesterday, now));
    }
}
